<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:wps="http://www.opengis.net/wps/1.0.0" xmlns:tbx="http://toolbox.pisa.intecs.it/WPS/ComplexData/referenceData" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" version="1.0">
  <xsl:output method="text"/>
  <!-- xsl:param name="toolboxServiceURL">http://localhost:8080/TOOLBOX</xsl:param> -->
  <xsl:param name="retrivedDataUrls">,A,B,C,D,</xsl:param>
  <xsl:param name="inputNameDataUrls">,A,B,InputRaster,D,</xsl:param>
  <xsl:param name="epsgGrassLocation">4326</xsl:param>
  <xsl:param name="processingName">RasterClipBBox</xsl:param>
  <xsl:param name="instanceValue">TEST</xsl:param>
  <xsl:param name="grassOutputFolder">/GRASS_OUTPUT_FOLDER/</xsl:param>
  <xsl:param name="grassTempFolder">/GRASS_TEMP_FOLDER/</xsl:param>
  <xsl:param name="downloadFolder">/DOWNLOAD_FOLDER/</xsl:param>
  <xsl:param name="grassLogFileInstance">/GRASS_LOG_FOLDER/GRASS_INSTANCE.txt</xsl:param>
  <xsl:param name="statusFileInstance">/GRASS_LOG_FOLDER/statusPercentage.xml</xsl:param>
  <xsl:param name="scriptPath">/GRASS_PATH_SCRIPT/</xsl:param>
  <xsl:param name="wpsWorkspace">/GRASS_WORKSPACE_FOLDER/</xsl:param>
  <xsl:param name="grassPath"></xsl:param>


  <!-- xsl:include href="ComplexData/CD_ReferenceData.xsl"/ -->

  <xsl:template match="*">
        #!/bin/bash
        	export INSTANCE_VALUE="<xsl:value-of select = "$instanceValue"/>"
        	export OUTPUT_REPOSITORY="<xsl:value-of select = "$grassOutputFolder"/>"
        	export TEMP_REPOSITORY="<xsl:value-of select = "$grassTempFolder"/>"
        	export WPS_PROCESSING_NAME="<xsl:value-of select = "$processingName"/>"
          	export STATUS_FILE="<xsl:value-of select = "$statusFileInstance"/>"
          <xsl:variable name="processInformation" select="document(string(concat('../DescribeProcess/DescribeInformation_', $processingName, '.xml')))"/>

         <xsl:for-each select="child::*">
            <xsl:variable name="positionIdentifier" select="position()"></xsl:variable>
            <xsl:variable name="nameIdentifier" select="local-name()"></xsl:variable>
            <xsl:variable name="inputIdentifierRequest" select="local-name()"/>
              <xsl:variable name="maxOccursInput"><xsl:number value="$processInformation/ProcessDescription/DataInputs/Input[ows:Identifier = $inputIdentifierRequest]/@maxOccurs"/></xsl:variable>
            <!--  MAXOCC <xsl:value-of select="$maxOccursInput"/>
              ID: <xsl:value-of select="$inputIdentifierRequest"/>-->
        <xsl:choose>
            <xsl:when test="wps:Reference">    
            <xsl:choose>
              <xsl:when test="$maxOccursInput &gt; 1">
                  <xsl:variable name="indentifierPostions">
                    <xsl:for-each select="../child::*"><xsl:if test="local-name() = $inputIdentifierRequest"><xsl:value-of select="position()"></xsl:value-of>,</xsl:if></xsl:for-each>
                  </xsl:variable>
                  <xsl:variable name="firstPosition"><xsl:value-of select="substring-before($indentifierPostions, ',')"/></xsl:variable>
                  <xsl:if test="$positionIdentifier = $firstPosition">
                    export <xsl:value-of select = "local-name()"/>_MULTIPLE_INPUT_FOLDER="<xsl:value-of select = "$downloadFolder"/><xsl:value-of select = "local-name()"/>"
                  
                    <xsl:if test="$processInformation/ProcessDescription/DataInputs/Input[ows:Identifier = $inputIdentifierRequest]/ComplexData/Default/Format/MimeType">
                            <xsl:variable name="mimeTypeList">
                              <xsl:for-each select="../child::*"><xsl:if test="local-name() = $inputIdentifierRequest"><xsl:choose><xsl:when test="wps:Reference/@mimeType"><xsl:value-of select="wps:Reference/@mimeType"/>,</xsl:when><xsl:otherwise><xsl:value-of select="$processInformation/ProcessDescription/DataInputs/Input[ows:Identifier = $inputIdentifierRequest]/ComplexData/Default/Format/MimeType"/>,</xsl:otherwise></xsl:choose></xsl:if></xsl:for-each>          
                            </xsl:variable>                 
                            export <xsl:value-of select = "local-name()"/>_MULTIPLE_INPUT_MimeType="<xsl:value-of select="substring($mimeTypeList,1,string-length($mimeTypeList)-1)"/>"
                    </xsl:if>
                    <xsl:if test="$processInformation/ProcessDescription/DataInputs/Input[ows:Identifier = $inputIdentifierRequest]/ComplexData/Default/Format/Encoding">
                            <xsl:variable name="encodingList">
                              <xsl:for-each select="../child::*"><xsl:if test="local-name() = $inputIdentifierRequest"><xsl:choose><xsl:when test="wps:Reference/@encoding"><xsl:value-of select="wps:Reference/@encoding"/>,</xsl:when><xsl:otherwise><xsl:value-of select="$processInformation/ProcessDescription/DataInputs/Input[ows:Identifier = $inputIdentifierRequest]/ComplexData/Default/Format/Encoding"/>,</xsl:otherwise></xsl:choose></xsl:if></xsl:for-each>
                            </xsl:variable>
                            export <xsl:value-of select = "local-name()"/>_MULTIPLE_INPUT_Encoding="<xsl:value-of select="substring($encodingList,1,string-length($encodingList)-1)"/>"
                    </xsl:if>
                    <xsl:if test="$processInformation/ProcessDescription/DataInputs/Input[ows:Identifier = $inputIdentifierRequest]/ComplexData/Default/Format/Schema">
                            <xsl:variable name="schemaList">
                              <xsl:for-each select="../child::*"><xsl:if test="local-name() = $inputIdentifierRequest"><xsl:choose><xsl:when test="wps:Reference/@schema"><xsl:value-of select="wps:Reference/@schema"/>,</xsl:when><xsl:otherwise><xsl:value-of select="$processInformation/ProcessDescription/DataInputs/Input[ows:Identifier = $inputIdentifierRequest]/ComplexData/Default/Format/Schema"/>,</xsl:otherwise></xsl:choose></xsl:if></xsl:for-each>
                            </xsl:variable>
                            export <xsl:value-of select = "local-name()"/>_MULTIPLE_INPUT_Schema="<xsl:value-of select="substring($schemaList,1,string-length($schemaList)-1)"/>"
                    </xsl:if>
                  </xsl:if>    
              </xsl:when>
              <xsl:otherwise>
                  <!--POSITION: <xsl:value-of select="$positionIdentifier"/>-->
                  <!--INPUT: <xsl:copy-of select="."/>-->
                <xsl:call-template name="GenericInputReferenceGrassEnviorement">
                  <xsl:with-param name="genericInput" select="."/>
                  <xsl:with-param name="genericInputName" select="$nameIdentifier"/>
                  <xsl:with-param name="processInformation" select="$processInformation"/>
                </xsl:call-template>
              </xsl:otherwise>    
            </xsl:choose>  
           </xsl:when>
           <xsl:otherwise>
              <xsl:choose>
                <xsl:when test="$maxOccursInput &gt; 1">
                  <xsl:variable name="indentifierPostions">
                          <xsl:for-each select="../child::*"><xsl:if test="local-name() = $inputIdentifierRequest"><xsl:value-of select="position()"></xsl:value-of>,</xsl:if></xsl:for-each>
                  </xsl:variable>
                  <xsl:variable name="firstPosition"><xsl:value-of select="substring-before($indentifierPostions, ',')"/></xsl:variable>
                  <xsl:if test="$positionIdentifier = $firstPosition">
                    <xsl:if test="$processInformation/ProcessDescription/DataInputs/Input[ows:Identifier = $inputIdentifierRequest]/LiteralData">
                          <xsl:variable name="literalList">
                            <xsl:for-each select="../child::*"><xsl:if test="local-name() = $inputIdentifierRequest"><xsl:value-of select="."/>,</xsl:if></xsl:for-each>
                          </xsl:variable>
                          export <xsl:value-of select = "local-name()"/>_MULTIPLE_LITERAL_LIST="<xsl:value-of select="substring($literalList,1,string-length($literalList)-1)"/>"

                          <xsl:if test="$processInformation/ProcessDescription/DataInputs/Input[ows:Identifier = $inputIdentifierRequest]/LiteralData/UOMs/Default/ows:UOM">
                            <xsl:variable name="literalUOMList">
                              <xsl:for-each select="../child::*"><xsl:if test="local-name() = $inputIdentifierRequest"><xsl:choose><xsl:when test="@uom"><xsl:value-of select="@uom"/>,</xsl:when><xsl:otherwise><xsl:value-of select="$processInformation/ProcessDescription/DataInputs/Input[ows:Identifier = $inputIdentifierRequest]/LiteralData/UOMs/Default/ows:UOM"/>,</xsl:otherwise></xsl:choose></xsl:if></xsl:for-each>
                            </xsl:variable>
                            export <xsl:value-of select = "local-name()"/>_MULTIPLE_LITERAL_UOM_LIST="<xsl:value-of select="substring($literalUOMList,1,string-length($literalUOMList)-1)"/>"
                          </xsl:if>
                    </xsl:if>
                    <xsl:if test="$processInformation/ProcessDescription/DataInputs/Input[ows:Identifier = $inputIdentifierRequest]/BoundingBoxData">
                        <xsl:variable name="bboxEPSGList">
                            <xsl:for-each select="../child::*"><xsl:if test="local-name() = $inputIdentifierRequest"><xsl:if test="wps:BoundingBoxData"><xsl:choose><xsl:when test="wps:BoundingBoxData/@crs"><xsl:value-of select = "wps:BoundingBoxData/@crs" /></xsl:when><xsl:otherwise>4326</xsl:otherwise></xsl:choose>,</xsl:if></xsl:if></xsl:for-each>
                        </xsl:variable>
                        export <xsl:value-of select = "local-name()" />_MULTIPLE_BBOX_EPSG="<xsl:value-of select="substring($bboxEPSGList,1,string-length($bboxEPSGList)-1)"/>"
                        <!--<xsl:variable name="bboxDimensionsList">
                            <xsl:for-each select="../child::*"><xsl:if test="local-name() = $inputIdentifierRequest"><xsl:if test="wps:BoundingBoxData"><xsl:choose><xsl:when test="wps:BoundingBoxData/@dimensions"><xsl:value-of select = "wps:BoundingBoxData/@dimensions" /></xsl:when><xsl:otherwise>2</xsl:otherwise></xsl:choose>,</xsl:if></xsl:if></xsl:for-each>
                        </xsl:variable>
                        export <xsl:value-of select = "local-name()" />_MULTIPLE_BBOX_DIMENSIONS="<xsl:value-of select="substring($bboxDimensionsList,1,string-length($bboxDimensionsList)-1)"/>"-->
                        <xsl:variable name="lowerCornerBBOXList">
                            <xsl:for-each select="../child::*"><xsl:if test="local-name() = $inputIdentifierRequest"><xsl:if test="wps:BoundingBoxData"><xsl:value-of select = "wps:BoundingBoxData/ows:LowerCorner" />,</xsl:if></xsl:if></xsl:for-each> 
                        </xsl:variable>             
                        export <xsl:value-of select = "local-name()" />_MULTIPLE_BBOX_LOWER_CORNER="<xsl:value-of select="substring($lowerCornerBBOXList,1,string-length($lowerCornerBBOXList)-1)"/>"
                        <xsl:variable name="upperCornerBBOXList">
                           <xsl:for-each select="../child::*"><xsl:if test="local-name() = $inputIdentifierRequest"><xsl:if test="wps:BoundingBoxData"><xsl:value-of select = "wps:BoundingBoxData/ows:UpperCorner" />,</xsl:if></xsl:if></xsl:for-each> 
                        </xsl:variable>      
                        export <xsl:value-of select = "local-name()" />_MULTIPLE_BBOX_UPPER_CORNER="<xsl:value-of select="substring($upperCornerBBOXList,1,string-length($upperCornerBBOXList)-1)"/>"
                    </xsl:if>
                    <xsl:if test="$processInformation/ProcessDescription/DataInputs/Input[ows:Identifier = $inputIdentifierRequest]/ComplexData">
                        <!-- apply specific template for new Complex Data Import -->
                    </xsl:if>
                  </xsl:if>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:call-template name="GenericInputGrassEnviorement">
                    <xsl:with-param name="genericInput" select="."/>
                    <xsl:with-param name="processInformation" select="$processInformation"/>
                  </xsl:call-template>
                </xsl:otherwise>
              </xsl:choose>
           </xsl:otherwise>
         </xsl:choose>
        </xsl:for-each> 
