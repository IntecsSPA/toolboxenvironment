package it.intecs.pisa.soap.toolbox;

import it.intecs.pisa.util.Util;
import java.io.*;
import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;

/**
 *
 * @author  mass
 */
public class ErrorMailer {
    
    private static ErrorMailer self;
    private String from;
    private String toSSE;
    private Vector to = new Vector();
    private String subject;
    private StringBuffer content = new StringBuffer(CONTENT_PREAMBLE).append('\n').append('\n').append(COMPANY);
    private static final String TOOLBOX = "TOOLBOX";
    private static final String ERROR_REPORT = "ERROR REPORT";
    private static final String SERVICE_NAME = "Service Name: ";
    private static final String SOAP_ACTION = "SOAP Action: ";
    private static final String MESSAGE_ID = "Message Id: ";
    private static final String ORDER_ID = "Order Id: ";
    private static final String CONTENT_PREAMBLE = "This mail has been automatically generated by the " + TOOLBOX;    
    private static final String VERSION = TOOLBOX + " " + "version: ";
    private static final String DATE = "Date: ";
    private static final String ERROR_MESSAGE = "Error message: ";
    private static final String COMPANY = "Company Name: ";
    private static final String CONTACT = "Company Contact Person: ";
    private Properties properties;
    
    private ErrorMailer(String from, String to, String toSSE, String smtpServer, String tbxVersion, String companyName, String contact) {
        Properties properties = System.getProperties();
        properties.put("mail.transport.protocol", "smtp");
        properties.put("mail.smtp.host", smtpServer);
        this.properties = properties;
        this.from = from;
        StringTokenizer sT = new StringTokenizer(to);
        while (sT.hasMoreTokens()) {
            this.to.add(sT.nextToken());
        }        
        this.toSSE = toSSE;
        String ver;
        subject = TOOLBOX + " " + tbxVersion + " - " + ERROR_REPORT;        
        content.append(companyName).append('\n').append(CONTACT).append(contact).append('\n').append('\n').append(VERSION).append(tbxVersion).append('\n').append(DATE);
    }
    
    public static ErrorMailer getInstance(String from, String to, String toSSE, String smtpServer, String tbxVersion, String companyName, String contact) {
        if (self == null) {
            self = new ErrorMailer(from, to, toSSE, smtpServer, tbxVersion, companyName, contact);
        } 
        return self;
    }
    
    public static ErrorMailer getInstance() {        
        return self;
    }
    
    private String getContent(HashMap contentParts, String errorMsg) {
        StringBuffer content = new StringBuffer(this.content.toString());
        content.append(Util.getDateTime()).append('\n');
        if (contentParts.containsKey("serviceName")) {
            content.append(SERVICE_NAME).append(
                    (String) contentParts.get("serviceName")).append('\n');
        }
        if (contentParts.containsKey("soapAction")) {
            content.append(SOAP_ACTION).append(
                    (String) contentParts.get("soapAction")).append('\n');
        }
        if (contentParts.containsKey("messageId")) {
            content.append(MESSAGE_ID).append(
                    (String) contentParts.get("messageId")).append('\n');
        }
        if (contentParts.containsKey("orderId")) {
            content.append(ORDER_ID).append(
                    (String) contentParts.get("orderId")).append('\n');
        }
        content.append(ERROR_MESSAGE).append(errorMsg);
        return content.toString();
    }
    
    public void sendMail(HashMap contentParts, String errorMsg,String destinations) {

        if(destinations.equals(""))
            return;

        try {
        Session session = Session.getInstance(properties, null);
        MimeMessage message = new MimeMessage(session);
        message.setFrom(new InternetAddress(from));

        if(destinations.equals("SP") || destinations.equals("BOTH")){
            for (int i = 0; i < to.size(); i++) {
            message.addRecipient(javax.mail.Message.RecipientType.TO, new InternetAddress((String) to.get(i)));
            }        
        }

        if(destinations.equals("SSE") || destinations.equals("BOTH")){
            message.addRecipient(javax.mail.Message.RecipientType.TO, new InternetAddress(toSSE));
        }
                
        message.setSubject(subject);        
        MimeMultipart multipart = new MimeMultipart();
        MimeBodyPart part = new MimeBodyPart();
        part.setText(getContent(contentParts, errorMsg));
        multipart.addBodyPart(part);        
        message.setContent(multipart);
        message.setSentDate(new Date());
        Transport.send(message);
        } catch (Exception e) {
            System.out.println("Couldn't send error report mail - stack trace following...");
            e.printStackTrace();
        }        
    }

        public void sendMail(HashMap contentParts, String errorMsg,File logDir,String destinations) {
            sendMail(contentParts,errorMsg,logDir,"errorEmail.txt", destinations);
        }

   public void sendMail(HashMap contentParts, String errorMsg,File logDir, String fileName, String destinations) {
        if(destinations.equals(""))
            return;

       try {
        File mailMessage = new File(logDir,fileName);
        FileWriter mailMessageWriter = new FileWriter(mailMessage);
        mailMessageWriter.write("From: " + from + "\n");
        //mailMessageWriter.append("From: " + from + "\n");

        if(destinations.equals("SP") || destinations.equals("BOTH")){
            for (int i = 0; i < to.size(); i++) {
                mailMessageWriter.write("To: " + (String) to.get(i)+ "\n");
                //mailMessageWriter.append("To: " + (String) to.get(i)+ "\n");
            }        
        }

        if(destinations.equals("SSE") || destinations.equals("BOTH")){
            mailMessageWriter.write("To: " + toSSE+ "\n");
            //mailMessageWriter.append("To: " + toSSE+ "\n");
        }
        
        
        for (int i = 0; i < to.size(); i++) {
            mailMessageWriter.write("To: " + (String) to.get(i)+ "\n");
            // mailMessageWriter.append("To: " + (String) to.get(i)+ "\n");
        }
        //mailMessageWriter.append("Date: " + new Date().toString()+ "\n");
        //mailMessageWriter.append("Subject: " + subject+ "\n");
        //mailMessageWriter.append("Content: " + errorMsg+ "\n");
        mailMessageWriter.write("Date: " + new Date().toString()+ "\n");
        mailMessageWriter.write("Subject: " + subject+ "\n");
        mailMessageWriter.write("Content: " + errorMsg+ "\n");
   
        mailMessageWriter.close();
        } catch (Exception e) {
            System.out.println("Couldn't send error report mail - stack trace following...");
            e.printStackTrace();
        }        
        
        sendMail(contentParts,errorMsg,destinations);        
    }
    
    public void sendMail(String errorMsg, String destinations) {
        sendMail(new HashMap(), errorMsg,destinations);
    }   
}
